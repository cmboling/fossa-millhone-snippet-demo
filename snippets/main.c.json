[
  {
    "found_in": "main.c",
    "local_text": "void on_mouse(int event, int x, int y, int , void * )\n{\n    // Action when left button is clicked\n    if(event == EVENT_LBUTTONDOWN)\n    {\n        if(!start_draw)\n        {\n            roi_x0 = x;\n            roi_y0 = y;\n            start_draw = true;\n        } else {\n            roi_x1 = x;\n            roi_y1 = y;\n            start_draw = false;\n        }\n    }\n\n    // Action when mouse is moving and drawing is enabled\n    if((event == EVENT_MOUSEMOVE) && start_draw)\n    {\n        // Redraw bounding box for annotation\n        Mat current_view;\n        image.copyTo(current_view);\n        rectangle(current_view, Point(roi_x0,roi_y0), Point(x,y), Scalar(0,0,255));\n        imshow(window_name, current_view);\n    }\n}",
    "local_snippet": {
      "fingerprint": "2fT3qvhPlNVRgTxgl2WyAiR9SFX5kWrUbv8uP8ySZM0=",
      "target": "function",
      "kind": "full",
      "method": "normalized(code)",
      "file_path": "main.c",
      "byte_start": 810,
      "byte_end": 1531,
      "line_start": 29,
      "line_end": 55,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "2fT3qvhPlNVRgTxgl2WyAiR9SFX5kWrUbv8uP8ySZM0=",
        "target": "function",
        "kind": "full",
        "method": "normalized(code)",
        "file_path": "Optimization/nn_dist/data/source_code/data_files/cpp/opencv_annotation.cpp",
        "byte_start": 3798,
        "byte_end": 4519,
        "line_start": 87,
        "line_end": 113,
        "col_start": 1,
        "col_end": 2,
        "language": "c99_tc3/static",
        "locator": "git+github.com/srianant/DNN_Hyperparameter_Optimization$9b047a6ba4dc636e9fd72b258c5a6952565e931b",
        "ingest_id": "c8a01f21-eb4c-455e-acdf-31f96c9056e9"
      },
      {
        "fingerprint": "2fT3qvhPlNVRgTxgl2WyAiR9SFX5kWrUbv8uP8ySZM0=",
        "target": "function",
        "kind": "full",
        "method": "normalized(code)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "2fT3qvhPlNVRgTxgl2WyAiR9SFX5kWrUbv8uP8ySZM0=",
        "target": "function",
        "kind": "full",
        "method": "normalized(code)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "2fT3qvhPlNVRgTxgl2WyAiR9SFX5kWrUbv8uP8ySZM0=",
        "target": "function",
        "kind": "full",
        "method": "normalized(code)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "2fT3qvhPlNVRgTxgl2WyAiR9SFX5kWrUbv8uP8ySZM0=",
        "target": "function",
        "kind": "full",
        "method": "normalized(code)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "int main( int argc, const char** argv )\n{\n    // Use the cmdlineparser to process input arguments\n    CommandLineParser parser(argc, argv,\n        \"{ help h usage ? |      | show this message }\"\n        \"{ images i       |      | (required) path to image folder [example - /data/testimages/] }\"\n        \"{ annotations a  |      | (required) path to annotations txt file [example - /data/annotations.txt] }\"\n        \"{ maxWindowHeight m  |  -1   | (optional) images larger in height than this value will be scaled down }\"\n        \"{ resizeFactor r  |  2  | (optional) factor for scaling down [default = half the size] }\"\n    );\n    // Read in the input arguments\n    if (parser.has(\"help\")){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return 0;\n    }\n    string image_folder(parser.get<string>(\"images\"));\n    string annotations_file(parser.get<string>(\"annotations\"));\n    if (image_folder.empty() || annotations_file.empty()){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return -1;\n    }\n\n    int resizeFactor = parser.get<int>(\"resizeFactor\");\n    int const maxWindowHeight = parser.get<int>(\"maxWindowHeight\") > 0 ? parser.get<int>(\"maxWindowHeight\") : -1;\n\n    // Start by processing the data\n    // Return the image filenames inside the image folder\n    map< String, vector<Rect> > annotations;\n    vector<String> filenames;\n    String folder(image_folder);\n    glob(folder, filenames);\n\n    // Add key tips on how to use the software when running it\n    cout << \"* mark rectangles with the left mouse button,\" << endl;\n    cout << \"* press 'c' to accept a selection,\" << endl;\n    cout << \"* press 'd' to delete the latest selection,\" << endl;\n    cout << \"* press 'n' to proceed with next image,\" << endl;\n    cout << \"* press 'esc' to stop.\" << endl;\n\n    // Loop through each image stored in the images folder\n    // Create and temporarily store the annotations\n    // At the end write everything to the annotations file\n    for (size_t i = 0; i < filenames.size(); i++){\n        // Read in an image\n        Mat current_image = imread(filenames[i]);\n        bool const resize_bool = (maxWindowHeight > 0) && (current_image.rows > maxWindowHeight);\n\n        // Check if the image is actually read - avoid other files in the folder, because glob() takes them all\n        // If not then simply skip this iteration\n        if(current_image.empty()){\n            continue;\n        }\n\n        if(resize_bool){\n            resize(current_image, current_image, Size(current_image.cols/resizeFactor, current_image.rows/resizeFactor), 0, 0, INTER_LINEAR_EXACT);\n        }\n\n        // Perform annotations & store the result inside the vectorized structure\n        // If the image was resized before, then resize the found annotations back to original dimensions\n        vector<Rect> current_annotations = get_annotations(current_image);\n        if(resize_bool){\n            for(int j =0; j < (int)current_annotations.size(); j++){\n                current_annotations[j].x = current_annotations[j].x * resizeFactor;\n                current_annotations[j].y = current_annotations[j].y * resizeFactor;\n                current_annotations[j].width = current_annotations[j].width * resizeFactor;\n                current_annotations[j].height = current_annotations[j].height * resizeFactor;\n            }\n        }\n        annotations[filenames[i]] = current_annotations;\n\n        // Check if the ESC key was hit, then exit earlier then expected\n        if(stop){\n            break;\n        }\n    }\n\n    // When all data is processed, store the data gathered inside the proper file\n    // This now even gets called when the ESC button was hit to store preliminary results\n    ofstream output(annotations_file.c_str());\n    if ( !output.is_open() ){\n        cerr << \"The path for the output file contains an error and could not be opened. Please check again!\" << endl;\n        return 0;\n    }\n\n    // Store the annotations, write to the output file\n    for(map<String, vector<Rect> >::iterator it = annotations.begin(); it != annotations.end(); it++){\n        vector<Rect> &anno = it->second;\n        output << it->first << \" \" << anno.size();\n        for(size_t j=0; j < anno.size(); j++){\n            Rect temp = anno[j];\n            output << \" \" << temp.x << \" \" << temp.y << \" \" << temp.width << \" \" << temp.height;\n        }\n        output << endl;\n    }\n\n    return 0;\n}",
    "local_snippet": {
      "fingerprint": "RrmNq11cdzYxPFIq2gGU/zfjHhleQUD5hxtN2jCcp78=",
      "target": "function",
      "kind": "full",
      "method": "normalized(space)",
      "file_path": "main.c",
      "byte_start": 5475,
      "byte_end": 10018,
      "line_start": 166,
      "line_end": 264,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "RrmNq11cdzYxPFIq2gGU/zfjHhleQUD5hxtN2jCcp78=",
        "target": "function",
        "kind": "full",
        "method": "normalized(space)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "RrmNq11cdzYxPFIq2gGU/zfjHhleQUD5hxtN2jCcp78=",
        "target": "function",
        "kind": "full",
        "method": "normalized(space)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "RrmNq11cdzYxPFIq2gGU/zfjHhleQUD5hxtN2jCcp78=",
        "target": "function",
        "kind": "full",
        "method": "normalized(space)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "RrmNq11cdzYxPFIq2gGU/zfjHhleQUD5hxtN2jCcp78=",
        "target": "function",
        "kind": "full",
        "method": "normalized(space)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "{\n    // Action when left button is clicked\n    if(event == EVENT_LBUTTONDOWN)\n    {\n        if(!start_draw)\n        {\n            roi_x0 = x;\n            roi_y0 = y;\n            start_draw = true;\n        } else {\n            roi_x1 = x;\n            roi_y1 = y;\n            start_draw = false;\n        }\n    }\n\n    // Action when mouse is moving and drawing is enabled\n    if((event == EVENT_MOUSEMOVE) && start_draw)\n    {\n        // Redraw bounding box for annotation\n        Mat current_view;\n        image.copyTo(current_view);\n        rectangle(current_view, Point(roi_x0,roi_y0), Point(x,y), Scalar(0,0,255));\n        imshow(window_name, current_view);\n    }\n}",
    "local_snippet": {
      "fingerprint": "NdWtCguU3Uk2Dq0gNN1wItRHM8k3Iwt3VCzqCpguzjM=",
      "target": "function",
      "kind": "body",
      "method": "raw",
      "file_path": "main.c",
      "byte_start": 864,
      "byte_end": 1531,
      "line_start": 30,
      "line_end": 55,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "NdWtCguU3Uk2Dq0gNN1wItRHM8k3Iwt3VCzqCpguzjM=",
        "target": "function",
        "kind": "body",
        "method": "raw",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "NdWtCguU3Uk2Dq0gNN1wItRHM8k3Iwt3VCzqCpguzjM=",
        "target": "function",
        "kind": "body",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "NdWtCguU3Uk2Dq0gNN1wItRHM8k3Iwt3VCzqCpguzjM=",
        "target": "function",
        "kind": "body",
        "method": "raw",
        "file_path": "Optimization/nn_dist/data/source_code/data_files/cpp/opencv_annotation.cpp",
        "byte_start": 3852,
        "byte_end": 4519,
        "line_start": 88,
        "line_end": 113,
        "col_start": 1,
        "col_end": 2,
        "language": "c99_tc3/static",
        "locator": "git+github.com/srianant/DNN_Hyperparameter_Optimization$9b047a6ba4dc636e9fd72b258c5a6952565e931b",
        "ingest_id": "c8a01f21-eb4c-455e-acdf-31f96c9056e9"
      },
      {
        "fingerprint": "NdWtCguU3Uk2Dq0gNN1wItRHM8k3Iwt3VCzqCpguzjM=",
        "target": "function",
        "kind": "body",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "NdWtCguU3Uk2Dq0gNN1wItRHM8k3Iwt3VCzqCpguzjM=",
        "target": "function",
        "kind": "body",
        "method": "raw",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "void on_mouse(int event, int x, int y, int , void * )\n{\n    // Action when left button is clicked\n    if(event == EVENT_LBUTTONDOWN)\n    {\n        if(!start_draw)\n        {\n            roi_x0 = x;\n            roi_y0 = y;\n            start_draw = true;\n        } else {\n            roi_x1 = x;\n            roi_y1 = y;\n            start_draw = false;\n        }\n    }\n\n    // Action when mouse is moving and drawing is enabled\n    if((event == EVENT_MOUSEMOVE) && start_draw)\n    {\n        // Redraw bounding box for annotation\n        Mat current_view;\n        image.copyTo(current_view);\n        rectangle(current_view, Point(roi_x0,roi_y0), Point(x,y), Scalar(0,0,255));\n        imshow(window_name, current_view);\n    }\n}",
    "local_snippet": {
      "fingerprint": "2Pr8jvxhtleH+qgnHARbTuCc8IOkNCC2YOaF+l4IJyE=",
      "target": "function",
      "kind": "full",
      "method": "normalized(space)",
      "file_path": "main.c",
      "byte_start": 810,
      "byte_end": 1531,
      "line_start": 29,
      "line_end": 55,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "2Pr8jvxhtleH+qgnHARbTuCc8IOkNCC2YOaF+l4IJyE=",
        "target": "function",
        "kind": "full",
        "method": "normalized(space)",
        "file_path": "Optimization/nn_dist/data/source_code/data_files/cpp/opencv_annotation.cpp",
        "byte_start": 3798,
        "byte_end": 4519,
        "line_start": 87,
        "line_end": 113,
        "col_start": 1,
        "col_end": 2,
        "language": "c99_tc3/static",
        "locator": "git+github.com/srianant/DNN_Hyperparameter_Optimization$9b047a6ba4dc636e9fd72b258c5a6952565e931b",
        "ingest_id": "c8a01f21-eb4c-455e-acdf-31f96c9056e9"
      },
      {
        "fingerprint": "2Pr8jvxhtleH+qgnHARbTuCc8IOkNCC2YOaF+l4IJyE=",
        "target": "function",
        "kind": "full",
        "method": "normalized(space)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "2Pr8jvxhtleH+qgnHARbTuCc8IOkNCC2YOaF+l4IJyE=",
        "target": "function",
        "kind": "full",
        "method": "normalized(space)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "2Pr8jvxhtleH+qgnHARbTuCc8IOkNCC2YOaF+l4IJyE=",
        "target": "function",
        "kind": "full",
        "method": "normalized(space)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "2Pr8jvxhtleH+qgnHARbTuCc8IOkNCC2YOaF+l4IJyE=",
        "target": "function",
        "kind": "full",
        "method": "normalized(space)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "{\n    // Use the cmdlineparser to process input arguments\n    CommandLineParser parser(argc, argv,\n        \"{ help h usage ? |      | show this message }\"\n        \"{ images i       |      | (required) path to image folder [example - /data/testimages/] }\"\n        \"{ annotations a  |      | (required) path to annotations txt file [example - /data/annotations.txt] }\"\n        \"{ maxWindowHeight m  |  -1   | (optional) images larger in height than this value will be scaled down }\"\n        \"{ resizeFactor r  |  2  | (optional) factor for scaling down [default = half the size] }\"\n    );\n    // Read in the input arguments\n    if (parser.has(\"help\")){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return 0;\n    }\n    string image_folder(parser.get<string>(\"images\"));\n    string annotations_file(parser.get<string>(\"annotations\"));\n    if (image_folder.empty() || annotations_file.empty()){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return -1;\n    }\n\n    int resizeFactor = parser.get<int>(\"resizeFactor\");\n    int const maxWindowHeight = parser.get<int>(\"maxWindowHeight\") > 0 ? parser.get<int>(\"maxWindowHeight\") : -1;\n\n    // Start by processing the data\n    // Return the image filenames inside the image folder\n    map< String, vector<Rect> > annotations;\n    vector<String> filenames;\n    String folder(image_folder);\n    glob(folder, filenames);\n\n    // Add key tips on how to use the software when running it\n    cout << \"* mark rectangles with the left mouse button,\" << endl;\n    cout << \"* press 'c' to accept a selection,\" << endl;\n    cout << \"* press 'd' to delete the latest selection,\" << endl;\n    cout << \"* press 'n' to proceed with next image,\" << endl;\n    cout << \"* press 'esc' to stop.\" << endl;\n\n    // Loop through each image stored in the images folder\n    // Create and temporarily store the annotations\n    // At the end write everything to the annotations file\n    for (size_t i = 0; i < filenames.size(); i++){\n        // Read in an image\n        Mat current_image = imread(filenames[i]);\n        bool const resize_bool = (maxWindowHeight > 0) && (current_image.rows > maxWindowHeight);\n\n        // Check if the image is actually read - avoid other files in the folder, because glob() takes them all\n        // If not then simply skip this iteration\n        if(current_image.empty()){\n            continue;\n        }\n\n        if(resize_bool){\n            resize(current_image, current_image, Size(current_image.cols/resizeFactor, current_image.rows/resizeFactor), 0, 0, INTER_LINEAR_EXACT);\n        }\n\n        // Perform annotations & store the result inside the vectorized structure\n        // If the image was resized before, then resize the found annotations back to original dimensions\n        vector<Rect> current_annotations = get_annotations(current_image);\n        if(resize_bool){\n            for(int j =0; j < (int)current_annotations.size(); j++){\n                current_annotations[j].x = current_annotations[j].x * resizeFactor;\n                current_annotations[j].y = current_annotations[j].y * resizeFactor;\n                current_annotations[j].width = current_annotations[j].width * resizeFactor;\n                current_annotations[j].height = current_annotations[j].height * resizeFactor;\n            }\n        }\n        annotations[filenames[i]] = current_annotations;\n\n        // Check if the ESC key was hit, then exit earlier then expected\n        if(stop){\n            break;\n        }\n    }\n\n    // When all data is processed, store the data gathered inside the proper file\n    // This now even gets called when the ESC button was hit to store preliminary results\n    ofstream output(annotations_file.c_str());\n    if ( !output.is_open() ){\n        cerr << \"The path for the output file contains an error and could not be opened. Please check again!\" << endl;\n        return 0;\n    }\n\n    // Store the annotations, write to the output file\n    for(map<String, vector<Rect> >::iterator it = annotations.begin(); it != annotations.end(); it++){\n        vector<Rect> &anno = it->second;\n        output << it->first << \" \" << anno.size();\n        for(size_t j=0; j < anno.size(); j++){\n            Rect temp = anno[j];\n            output << \" \" << temp.x << \" \" << temp.y << \" \" << temp.width << \" \" << temp.height;\n        }\n        output << endl;\n    }\n\n    return 0;\n}",
    "local_snippet": {
      "fingerprint": "zoPZdZXU9BxBfIiQTEBlt10QtvKBnjITcjrDFpxaSC4=",
      "target": "function",
      "kind": "body",
      "method": "normalized(code)",
      "file_path": "main.c",
      "byte_start": 5515,
      "byte_end": 10018,
      "line_start": 167,
      "line_end": 264,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "zoPZdZXU9BxBfIiQTEBlt10QtvKBnjITcjrDFpxaSC4=",
        "target": "function",
        "kind": "body",
        "method": "normalized(code)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "zoPZdZXU9BxBfIiQTEBlt10QtvKBnjITcjrDFpxaSC4=",
        "target": "function",
        "kind": "body",
        "method": "normalized(code)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "zoPZdZXU9BxBfIiQTEBlt10QtvKBnjITcjrDFpxaSC4=",
        "target": "function",
        "kind": "body",
        "method": "normalized(code)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "zoPZdZXU9BxBfIiQTEBlt10QtvKBnjITcjrDFpxaSC4=",
        "target": "function",
        "kind": "body",
        "method": "normalized(code)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "{\n    // Action when left button is clicked\n    if(event == EVENT_LBUTTONDOWN)\n    {\n        if(!start_draw)\n        {\n            roi_x0 = x;\n            roi_y0 = y;\n            start_draw = true;\n        } else {\n            roi_x1 = x;\n            roi_y1 = y;\n            start_draw = false;\n        }\n    }\n\n    // Action when mouse is moving and drawing is enabled\n    if((event == EVENT_MOUSEMOVE) && start_draw)\n    {\n        // Redraw bounding box for annotation\n        Mat current_view;\n        image.copyTo(current_view);\n        rectangle(current_view, Point(roi_x0,roi_y0), Point(x,y), Scalar(0,0,255));\n        imshow(window_name, current_view);\n    }\n}",
    "local_snippet": {
      "fingerprint": "BCzhjpYuxzjBiqdcw0eWjn7kjWTsrYSHoybG+UKQzqo=",
      "target": "function",
      "kind": "body",
      "method": "normalized(space)",
      "file_path": "main.c",
      "byte_start": 864,
      "byte_end": 1531,
      "line_start": 30,
      "line_end": 55,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "BCzhjpYuxzjBiqdcw0eWjn7kjWTsrYSHoybG+UKQzqo=",
        "target": "function",
        "kind": "body",
        "method": "normalized(space)",
        "file_path": "Optimization/nn_dist/data/source_code/data_files/cpp/opencv_annotation.cpp",
        "byte_start": 3852,
        "byte_end": 4519,
        "line_start": 88,
        "line_end": 113,
        "col_start": 1,
        "col_end": 2,
        "language": "c99_tc3/static",
        "locator": "git+github.com/srianant/DNN_Hyperparameter_Optimization$9b047a6ba4dc636e9fd72b258c5a6952565e931b",
        "ingest_id": "c8a01f21-eb4c-455e-acdf-31f96c9056e9"
      },
      {
        "fingerprint": "BCzhjpYuxzjBiqdcw0eWjn7kjWTsrYSHoybG+UKQzqo=",
        "target": "function",
        "kind": "body",
        "method": "normalized(space)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "BCzhjpYuxzjBiqdcw0eWjn7kjWTsrYSHoybG+UKQzqo=",
        "target": "function",
        "kind": "body",
        "method": "normalized(space)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "BCzhjpYuxzjBiqdcw0eWjn7kjWTsrYSHoybG+UKQzqo=",
        "target": "function",
        "kind": "body",
        "method": "normalized(space)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "BCzhjpYuxzjBiqdcw0eWjn7kjWTsrYSHoybG+UKQzqo=",
        "target": "function",
        "kind": "body",
        "method": "normalized(space)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "int main( int argc, const char** argv )\n{\n    // Use the cmdlineparser to process input arguments\n    CommandLineParser parser(argc, argv,\n        \"{ help h usage ? |      | show this message }\"\n        \"{ images i       |      | (required) path to image folder [example - /data/testimages/] }\"\n        \"{ annotations a  |      | (required) path to annotations txt file [example - /data/annotations.txt] }\"\n        \"{ maxWindowHeight m  |  -1   | (optional) images larger in height than this value will be scaled down }\"\n        \"{ resizeFactor r  |  2  | (optional) factor for scaling down [default = half the size] }\"\n    );\n    // Read in the input arguments\n    if (parser.has(\"help\")){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return 0;\n    }\n    string image_folder(parser.get<string>(\"images\"));\n    string annotations_file(parser.get<string>(\"annotations\"));\n    if (image_folder.empty() || annotations_file.empty()){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return -1;\n    }\n\n    int resizeFactor = parser.get<int>(\"resizeFactor\");\n    int const maxWindowHeight = parser.get<int>(\"maxWindowHeight\") > 0 ? parser.get<int>(\"maxWindowHeight\") : -1;\n\n    // Start by processing the data\n    // Return the image filenames inside the image folder\n    map< String, vector<Rect> > annotations;\n    vector<String> filenames;\n    String folder(image_folder);\n    glob(folder, filenames);\n\n    // Add key tips on how to use the software when running it\n    cout << \"* mark rectangles with the left mouse button,\" << endl;\n    cout << \"* press 'c' to accept a selection,\" << endl;\n    cout << \"* press 'd' to delete the latest selection,\" << endl;\n    cout << \"* press 'n' to proceed with next image,\" << endl;\n    cout << \"* press 'esc' to stop.\" << endl;\n\n    // Loop through each image stored in the images folder\n    // Create and temporarily store the annotations\n    // At the end write everything to the annotations file\n    for (size_t i = 0; i < filenames.size(); i++){\n        // Read in an image\n        Mat current_image = imread(filenames[i]);\n        bool const resize_bool = (maxWindowHeight > 0) && (current_image.rows > maxWindowHeight);\n\n        // Check if the image is actually read - avoid other files in the folder, because glob() takes them all\n        // If not then simply skip this iteration\n        if(current_image.empty()){\n            continue;\n        }\n\n        if(resize_bool){\n            resize(current_image, current_image, Size(current_image.cols/resizeFactor, current_image.rows/resizeFactor), 0, 0, INTER_LINEAR_EXACT);\n        }\n\n        // Perform annotations & store the result inside the vectorized structure\n        // If the image was resized before, then resize the found annotations back to original dimensions\n        vector<Rect> current_annotations = get_annotations(current_image);\n        if(resize_bool){\n            for(int j =0; j < (int)current_annotations.size(); j++){\n                current_annotations[j].x = current_annotations[j].x * resizeFactor;\n                current_annotations[j].y = current_annotations[j].y * resizeFactor;\n                current_annotations[j].width = current_annotations[j].width * resizeFactor;\n                current_annotations[j].height = current_annotations[j].height * resizeFactor;\n            }\n        }\n        annotations[filenames[i]] = current_annotations;\n\n        // Check if the ESC key was hit, then exit earlier then expected\n        if(stop){\n            break;\n        }\n    }\n\n    // When all data is processed, store the data gathered inside the proper file\n    // This now even gets called when the ESC button was hit to store preliminary results\n    ofstream output(annotations_file.c_str());\n    if ( !output.is_open() ){\n        cerr << \"The path for the output file contains an error and could not be opened. Please check again!\" << endl;\n        return 0;\n    }\n\n    // Store the annotations, write to the output file\n    for(map<String, vector<Rect> >::iterator it = annotations.begin(); it != annotations.end(); it++){\n        vector<Rect> &anno = it->second;\n        output << it->first << \" \" << anno.size();\n        for(size_t j=0; j < anno.size(); j++){\n            Rect temp = anno[j];\n            output << \" \" << temp.x << \" \" << temp.y << \" \" << temp.width << \" \" << temp.height;\n        }\n        output << endl;\n    }\n\n    return 0;\n}",
    "local_snippet": {
      "fingerprint": "Y+zct1sDYhR1k04g/GdhBBEkA4vNo8S591VUaoOdNrA=",
      "target": "function",
      "kind": "full",
      "method": "raw",
      "file_path": "main.c",
      "byte_start": 5475,
      "byte_end": 10018,
      "line_start": 166,
      "line_end": 264,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "Y+zct1sDYhR1k04g/GdhBBEkA4vNo8S591VUaoOdNrA=",
        "target": "function",
        "kind": "full",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "Y+zct1sDYhR1k04g/GdhBBEkA4vNo8S591VUaoOdNrA=",
        "target": "function",
        "kind": "full",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "Y+zct1sDYhR1k04g/GdhBBEkA4vNo8S591VUaoOdNrA=",
        "target": "function",
        "kind": "full",
        "method": "raw",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "Y+zct1sDYhR1k04g/GdhBBEkA4vNo8S591VUaoOdNrA=",
        "target": "function",
        "kind": "full",
        "method": "raw",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "int main( int argc, const char** argv )\n{\n    // Use the cmdlineparser to process input arguments\n    CommandLineParser parser(argc, argv,\n        \"{ help h usage ? |      | show this message }\"\n        \"{ images i       |      | (required) path to image folder [example - /data/testimages/] }\"\n        \"{ annotations a  |      | (required) path to annotations txt file [example - /data/annotations.txt] }\"\n        \"{ maxWindowHeight m  |  -1   | (optional) images larger in height than this value will be scaled down }\"\n        \"{ resizeFactor r  |  2  | (optional) factor for scaling down [default = half the size] }\"\n    );\n    // Read in the input arguments\n    if (parser.has(\"help\")){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return 0;\n    }\n    string image_folder(parser.get<string>(\"images\"));\n    string annotations_file(parser.get<string>(\"annotations\"));\n    if (image_folder.empty() || annotations_file.empty()){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return -1;\n    }\n\n    int resizeFactor = parser.get<int>(\"resizeFactor\");\n    int const maxWindowHeight = parser.get<int>(\"maxWindowHeight\") > 0 ? parser.get<int>(\"maxWindowHeight\") : -1;\n\n    // Start by processing the data\n    // Return the image filenames inside the image folder\n    map< String, vector<Rect> > annotations;\n    vector<String> filenames;\n    String folder(image_folder);\n    glob(folder, filenames);\n\n    // Add key tips on how to use the software when running it\n    cout << \"* mark rectangles with the left mouse button,\" << endl;\n    cout << \"* press 'c' to accept a selection,\" << endl;\n    cout << \"* press 'd' to delete the latest selection,\" << endl;\n    cout << \"* press 'n' to proceed with next image,\" << endl;\n    cout << \"* press 'esc' to stop.\" << endl;\n\n    // Loop through each image stored in the images folder\n    // Create and temporarily store the annotations\n    // At the end write everything to the annotations file\n    for (size_t i = 0; i < filenames.size(); i++){\n        // Read in an image\n        Mat current_image = imread(filenames[i]);\n        bool const resize_bool = (maxWindowHeight > 0) && (current_image.rows > maxWindowHeight);\n\n        // Check if the image is actually read - avoid other files in the folder, because glob() takes them all\n        // If not then simply skip this iteration\n        if(current_image.empty()){\n            continue;\n        }\n\n        if(resize_bool){\n            resize(current_image, current_image, Size(current_image.cols/resizeFactor, current_image.rows/resizeFactor), 0, 0, INTER_LINEAR_EXACT);\n        }\n\n        // Perform annotations & store the result inside the vectorized structure\n        // If the image was resized before, then resize the found annotations back to original dimensions\n        vector<Rect> current_annotations = get_annotations(current_image);\n        if(resize_bool){\n            for(int j =0; j < (int)current_annotations.size(); j++){\n                current_annotations[j].x = current_annotations[j].x * resizeFactor;\n                current_annotations[j].y = current_annotations[j].y * resizeFactor;\n                current_annotations[j].width = current_annotations[j].width * resizeFactor;\n                current_annotations[j].height = current_annotations[j].height * resizeFactor;\n            }\n        }\n        annotations[filenames[i]] = current_annotations;\n\n        // Check if the ESC key was hit, then exit earlier then expected\n        if(stop){\n            break;\n        }\n    }\n\n    // When all data is processed, store the data gathered inside the proper file\n    // This now even gets called when the ESC button was hit to store preliminary results\n    ofstream output(annotations_file.c_str());\n    if ( !output.is_open() ){\n        cerr << \"The path for the output file contains an error and could not be opened. Please check again!\" << endl;\n        return 0;\n    }\n\n    // Store the annotations, write to the output file\n    for(map<String, vector<Rect> >::iterator it = annotations.begin(); it != annotations.end(); it++){\n        vector<Rect> &anno = it->second;\n        output << it->first << \" \" << anno.size();\n        for(size_t j=0; j < anno.size(); j++){\n            Rect temp = anno[j];\n            output << \" \" << temp.x << \" \" << temp.y << \" \" << temp.width << \" \" << temp.height;\n        }\n        output << endl;\n    }\n\n    return 0;\n}",
    "local_snippet": {
      "fingerprint": "wbtgUNegQvnjuQxN4EMnS4SYCUVTtX+A2crVhFR3neU=",
      "target": "function",
      "kind": "full",
      "method": "normalized(code)",
      "file_path": "main.c",
      "byte_start": 5475,
      "byte_end": 10018,
      "line_start": 166,
      "line_end": 264,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "wbtgUNegQvnjuQxN4EMnS4SYCUVTtX+A2crVhFR3neU=",
        "target": "function",
        "kind": "full",
        "method": "normalized(code)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "wbtgUNegQvnjuQxN4EMnS4SYCUVTtX+A2crVhFR3neU=",
        "target": "function",
        "kind": "full",
        "method": "normalized(code)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "wbtgUNegQvnjuQxN4EMnS4SYCUVTtX+A2crVhFR3neU=",
        "target": "function",
        "kind": "full",
        "method": "normalized(code)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "wbtgUNegQvnjuQxN4EMnS4SYCUVTtX+A2crVhFR3neU=",
        "target": "function",
        "kind": "full",
        "method": "normalized(code)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "{\n    // Use the cmdlineparser to process input arguments\n    CommandLineParser parser(argc, argv,\n        \"{ help h usage ? |      | show this message }\"\n        \"{ images i       |      | (required) path to image folder [example - /data/testimages/] }\"\n        \"{ annotations a  |      | (required) path to annotations txt file [example - /data/annotations.txt] }\"\n        \"{ maxWindowHeight m  |  -1   | (optional) images larger in height than this value will be scaled down }\"\n        \"{ resizeFactor r  |  2  | (optional) factor for scaling down [default = half the size] }\"\n    );\n    // Read in the input arguments\n    if (parser.has(\"help\")){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return 0;\n    }\n    string image_folder(parser.get<string>(\"images\"));\n    string annotations_file(parser.get<string>(\"annotations\"));\n    if (image_folder.empty() || annotations_file.empty()){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return -1;\n    }\n\n    int resizeFactor = parser.get<int>(\"resizeFactor\");\n    int const maxWindowHeight = parser.get<int>(\"maxWindowHeight\") > 0 ? parser.get<int>(\"maxWindowHeight\") : -1;\n\n    // Start by processing the data\n    // Return the image filenames inside the image folder\n    map< String, vector<Rect> > annotations;\n    vector<String> filenames;\n    String folder(image_folder);\n    glob(folder, filenames);\n\n    // Add key tips on how to use the software when running it\n    cout << \"* mark rectangles with the left mouse button,\" << endl;\n    cout << \"* press 'c' to accept a selection,\" << endl;\n    cout << \"* press 'd' to delete the latest selection,\" << endl;\n    cout << \"* press 'n' to proceed with next image,\" << endl;\n    cout << \"* press 'esc' to stop.\" << endl;\n\n    // Loop through each image stored in the images folder\n    // Create and temporarily store the annotations\n    // At the end write everything to the annotations file\n    for (size_t i = 0; i < filenames.size(); i++){\n        // Read in an image\n        Mat current_image = imread(filenames[i]);\n        bool const resize_bool = (maxWindowHeight > 0) && (current_image.rows > maxWindowHeight);\n\n        // Check if the image is actually read - avoid other files in the folder, because glob() takes them all\n        // If not then simply skip this iteration\n        if(current_image.empty()){\n            continue;\n        }\n\n        if(resize_bool){\n            resize(current_image, current_image, Size(current_image.cols/resizeFactor, current_image.rows/resizeFactor), 0, 0, INTER_LINEAR_EXACT);\n        }\n\n        // Perform annotations & store the result inside the vectorized structure\n        // If the image was resized before, then resize the found annotations back to original dimensions\n        vector<Rect> current_annotations = get_annotations(current_image);\n        if(resize_bool){\n            for(int j =0; j < (int)current_annotations.size(); j++){\n                current_annotations[j].x = current_annotations[j].x * resizeFactor;\n                current_annotations[j].y = current_annotations[j].y * resizeFactor;\n                current_annotations[j].width = current_annotations[j].width * resizeFactor;\n                current_annotations[j].height = current_annotations[j].height * resizeFactor;\n            }\n        }\n        annotations[filenames[i]] = current_annotations;\n\n        // Check if the ESC key was hit, then exit earlier then expected\n        if(stop){\n            break;\n        }\n    }\n\n    // When all data is processed, store the data gathered inside the proper file\n    // This now even gets called when the ESC button was hit to store preliminary results\n    ofstream output(annotations_file.c_str());\n    if ( !output.is_open() ){\n        cerr << \"The path for the output file contains an error and could not be opened. Please check again!\" << endl;\n        return 0;\n    }\n\n    // Store the annotations, write to the output file\n    for(map<String, vector<Rect> >::iterator it = annotations.begin(); it != annotations.end(); it++){\n        vector<Rect> &anno = it->second;\n        output << it->first << \" \" << anno.size();\n        for(size_t j=0; j < anno.size(); j++){\n            Rect temp = anno[j];\n            output << \" \" << temp.x << \" \" << temp.y << \" \" << temp.width << \" \" << temp.height;\n        }\n        output << endl;\n    }\n\n    return 0;\n}",
    "local_snippet": {
      "fingerprint": "zVtbDuqknmzLxSaZsqOFsLcmfnNJ3k7zz/L26P8vMWw=",
      "target": "function",
      "kind": "body",
      "method": "normalized(space)",
      "file_path": "main.c",
      "byte_start": 5515,
      "byte_end": 10018,
      "line_start": 167,
      "line_end": 264,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "zVtbDuqknmzLxSaZsqOFsLcmfnNJ3k7zz/L26P8vMWw=",
        "target": "function",
        "kind": "body",
        "method": "normalized(space)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "zVtbDuqknmzLxSaZsqOFsLcmfnNJ3k7zz/L26P8vMWw=",
        "target": "function",
        "kind": "body",
        "method": "normalized(space)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "zVtbDuqknmzLxSaZsqOFsLcmfnNJ3k7zz/L26P8vMWw=",
        "target": "function",
        "kind": "body",
        "method": "normalized(space)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "zVtbDuqknmzLxSaZsqOFsLcmfnNJ3k7zz/L26P8vMWw=",
        "target": "function",
        "kind": "body",
        "method": "normalized(space)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "void on_mouse(int event, int x, int y, int , void * )\n{\n    // Action when left button is clicked\n    if(event == EVENT_LBUTTONDOWN)\n    {\n        if(!start_draw)\n        {\n            roi_x0 = x;\n            roi_y0 = y;\n            start_draw = true;\n        } else {\n            roi_x1 = x;\n            roi_y1 = y;\n            start_draw = false;\n        }\n    }\n\n    // Action when mouse is moving and drawing is enabled\n    if((event == EVENT_MOUSEMOVE) && start_draw)\n    {\n        // Redraw bounding box for annotation\n        Mat current_view;\n        image.copyTo(current_view);\n        rectangle(current_view, Point(roi_x0,roi_y0), Point(x,y), Scalar(0,0,255));\n        imshow(window_name, current_view);\n    }\n}",
    "local_snippet": {
      "fingerprint": "ITn9WSJ64LmRU9W3BzsVDVxAsNSJeVEya78O0SW08Gk=",
      "target": "function",
      "kind": "full",
      "method": "normalized(comment)",
      "file_path": "main.c",
      "byte_start": 810,
      "byte_end": 1531,
      "line_start": 29,
      "line_end": 55,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "ITn9WSJ64LmRU9W3BzsVDVxAsNSJeVEya78O0SW08Gk=",
        "target": "function",
        "kind": "full",
        "method": "normalized(comment)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "ITn9WSJ64LmRU9W3BzsVDVxAsNSJeVEya78O0SW08Gk=",
        "target": "function",
        "kind": "full",
        "method": "normalized(comment)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "ITn9WSJ64LmRU9W3BzsVDVxAsNSJeVEya78O0SW08Gk=",
        "target": "function",
        "kind": "full",
        "method": "normalized(comment)",
        "file_path": "Optimization/nn_dist/data/source_code/data_files/cpp/opencv_annotation.cpp",
        "byte_start": 3798,
        "byte_end": 4519,
        "line_start": 87,
        "line_end": 113,
        "col_start": 1,
        "col_end": 2,
        "language": "c99_tc3/static",
        "locator": "git+github.com/srianant/DNN_Hyperparameter_Optimization$9b047a6ba4dc636e9fd72b258c5a6952565e931b",
        "ingest_id": "c8a01f21-eb4c-455e-acdf-31f96c9056e9"
      },
      {
        "fingerprint": "ITn9WSJ64LmRU9W3BzsVDVxAsNSJeVEya78O0SW08Gk=",
        "target": "function",
        "kind": "full",
        "method": "normalized(comment)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "ITn9WSJ64LmRU9W3BzsVDVxAsNSJeVEya78O0SW08Gk=",
        "target": "function",
        "kind": "full",
        "method": "normalized(comment)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "int main( int argc, const char** argv )\n{\n    // Use the cmdlineparser to process input arguments\n    CommandLineParser parser(argc, argv,\n        \"{ help h usage ? |      | show this message }\"\n        \"{ images i       |      | (required) path to image folder [example - /data/testimages/] }\"\n        \"{ annotations a  |      | (required) path to annotations txt file [example - /data/annotations.txt] }\"\n        \"{ maxWindowHeight m  |  -1   | (optional) images larger in height than this value will be scaled down }\"\n        \"{ resizeFactor r  |  2  | (optional) factor for scaling down [default = half the size] }\"\n    );\n    // Read in the input arguments\n    if (parser.has(\"help\")){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return 0;\n    }\n    string image_folder(parser.get<string>(\"images\"));\n    string annotations_file(parser.get<string>(\"annotations\"));\n    if (image_folder.empty() || annotations_file.empty()){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return -1;\n    }\n\n    int resizeFactor = parser.get<int>(\"resizeFactor\");\n    int const maxWindowHeight = parser.get<int>(\"maxWindowHeight\") > 0 ? parser.get<int>(\"maxWindowHeight\") : -1;\n\n    // Start by processing the data\n    // Return the image filenames inside the image folder\n    map< String, vector<Rect> > annotations;\n    vector<String> filenames;\n    String folder(image_folder);\n    glob(folder, filenames);\n\n    // Add key tips on how to use the software when running it\n    cout << \"* mark rectangles with the left mouse button,\" << endl;\n    cout << \"* press 'c' to accept a selection,\" << endl;\n    cout << \"* press 'd' to delete the latest selection,\" << endl;\n    cout << \"* press 'n' to proceed with next image,\" << endl;\n    cout << \"* press 'esc' to stop.\" << endl;\n\n    // Loop through each image stored in the images folder\n    // Create and temporarily store the annotations\n    // At the end write everything to the annotations file\n    for (size_t i = 0; i < filenames.size(); i++){\n        // Read in an image\n        Mat current_image = imread(filenames[i]);\n        bool const resize_bool = (maxWindowHeight > 0) && (current_image.rows > maxWindowHeight);\n\n        // Check if the image is actually read - avoid other files in the folder, because glob() takes them all\n        // If not then simply skip this iteration\n        if(current_image.empty()){\n            continue;\n        }\n\n        if(resize_bool){\n            resize(current_image, current_image, Size(current_image.cols/resizeFactor, current_image.rows/resizeFactor), 0, 0, INTER_LINEAR_EXACT);\n        }\n\n        // Perform annotations & store the result inside the vectorized structure\n        // If the image was resized before, then resize the found annotations back to original dimensions\n        vector<Rect> current_annotations = get_annotations(current_image);\n        if(resize_bool){\n            for(int j =0; j < (int)current_annotations.size(); j++){\n                current_annotations[j].x = current_annotations[j].x * resizeFactor;\n                current_annotations[j].y = current_annotations[j].y * resizeFactor;\n                current_annotations[j].width = current_annotations[j].width * resizeFactor;\n                current_annotations[j].height = current_annotations[j].height * resizeFactor;\n            }\n        }\n        annotations[filenames[i]] = current_annotations;\n\n        // Check if the ESC key was hit, then exit earlier then expected\n        if(stop){\n            break;\n        }\n    }\n\n    // When all data is processed, store the data gathered inside the proper file\n    // This now even gets called when the ESC button was hit to store preliminary results\n    ofstream output(annotations_file.c_str());\n    if ( !output.is_open() ){\n        cerr << \"The path for the output file contains an error and could not be opened. Please check again!\" << endl;\n        return 0;\n    }\n\n    // Store the annotations, write to the output file\n    for(map<String, vector<Rect> >::iterator it = annotations.begin(); it != annotations.end(); it++){\n        vector<Rect> &anno = it->second;\n        output << it->first << \" \" << anno.size();\n        for(size_t j=0; j < anno.size(); j++){\n            Rect temp = anno[j];\n            output << \" \" << temp.x << \" \" << temp.y << \" \" << temp.width << \" \" << temp.height;\n        }\n        output << endl;\n    }\n\n    return 0;\n}",
    "local_snippet": {
      "fingerprint": "qzqHkGHGczlg/7YbcznoLpmh7THUMwbN/Xl58SnBjVU=",
      "target": "function",
      "kind": "full",
      "method": "normalized(comment)",
      "file_path": "main.c",
      "byte_start": 5475,
      "byte_end": 10018,
      "line_start": 166,
      "line_end": 264,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "qzqHkGHGczlg/7YbcznoLpmh7THUMwbN/Xl58SnBjVU=",
        "target": "function",
        "kind": "full",
        "method": "normalized(comment)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "qzqHkGHGczlg/7YbcznoLpmh7THUMwbN/Xl58SnBjVU=",
        "target": "function",
        "kind": "full",
        "method": "normalized(comment)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "qzqHkGHGczlg/7YbcznoLpmh7THUMwbN/Xl58SnBjVU=",
        "target": "function",
        "kind": "full",
        "method": "normalized(comment)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "qzqHkGHGczlg/7YbcznoLpmh7THUMwbN/Xl58SnBjVU=",
        "target": "function",
        "kind": "full",
        "method": "normalized(comment)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8397,
        "byte_end": 12940,
        "line_start": 219,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "{\n    // Action when left button is clicked\n    if(event == EVENT_LBUTTONDOWN)\n    {\n        if(!start_draw)\n        {\n            roi_x0 = x;\n            roi_y0 = y;\n            start_draw = true;\n        } else {\n            roi_x1 = x;\n            roi_y1 = y;\n            start_draw = false;\n        }\n    }\n\n    // Action when mouse is moving and drawing is enabled\n    if((event == EVENT_MOUSEMOVE) && start_draw)\n    {\n        // Redraw bounding box for annotation\n        Mat current_view;\n        image.copyTo(current_view);\n        rectangle(current_view, Point(roi_x0,roi_y0), Point(x,y), Scalar(0,0,255));\n        imshow(window_name, current_view);\n    }\n}",
    "local_snippet": {
      "fingerprint": "UCRDzxqZxaJoGulY/kAyjWIw34BrIGrbVpeGIrwWOAw=",
      "target": "function",
      "kind": "body",
      "method": "normalized(comment)",
      "file_path": "main.c",
      "byte_start": 864,
      "byte_end": 1531,
      "line_start": 30,
      "line_end": 55,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "UCRDzxqZxaJoGulY/kAyjWIw34BrIGrbVpeGIrwWOAw=",
        "target": "function",
        "kind": "body",
        "method": "normalized(comment)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "UCRDzxqZxaJoGulY/kAyjWIw34BrIGrbVpeGIrwWOAw=",
        "target": "function",
        "kind": "body",
        "method": "normalized(comment)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "UCRDzxqZxaJoGulY/kAyjWIw34BrIGrbVpeGIrwWOAw=",
        "target": "function",
        "kind": "body",
        "method": "normalized(comment)",
        "file_path": "Optimization/nn_dist/data/source_code/data_files/cpp/opencv_annotation.cpp",
        "byte_start": 3852,
        "byte_end": 4519,
        "line_start": 88,
        "line_end": 113,
        "col_start": 1,
        "col_end": 2,
        "language": "c99_tc3/static",
        "locator": "git+github.com/srianant/DNN_Hyperparameter_Optimization$9b047a6ba4dc636e9fd72b258c5a6952565e931b",
        "ingest_id": "c8a01f21-eb4c-455e-acdf-31f96c9056e9"
      },
      {
        "fingerprint": "UCRDzxqZxaJoGulY/kAyjWIw34BrIGrbVpeGIrwWOAw=",
        "target": "function",
        "kind": "body",
        "method": "normalized(comment)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "UCRDzxqZxaJoGulY/kAyjWIw34BrIGrbVpeGIrwWOAw=",
        "target": "function",
        "kind": "body",
        "method": "normalized(comment)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "{\n    // Action when left button is clicked\n    if(event == EVENT_LBUTTONDOWN)\n    {\n        if(!start_draw)\n        {\n            roi_x0 = x;\n            roi_y0 = y;\n            start_draw = true;\n        } else {\n            roi_x1 = x;\n            roi_y1 = y;\n            start_draw = false;\n        }\n    }\n\n    // Action when mouse is moving and drawing is enabled\n    if((event == EVENT_MOUSEMOVE) && start_draw)\n    {\n        // Redraw bounding box for annotation\n        Mat current_view;\n        image.copyTo(current_view);\n        rectangle(current_view, Point(roi_x0,roi_y0), Point(x,y), Scalar(0,0,255));\n        imshow(window_name, current_view);\n    }\n}",
    "local_snippet": {
      "fingerprint": "5JM4kNznvqH/mB5ZBskwHECEEV5q3uG4S/038u6vkiI=",
      "target": "function",
      "kind": "body",
      "method": "normalized(code)",
      "file_path": "main.c",
      "byte_start": 864,
      "byte_end": 1531,
      "line_start": 30,
      "line_end": 55,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "5JM4kNznvqH/mB5ZBskwHECEEV5q3uG4S/038u6vkiI=",
        "target": "function",
        "kind": "body",
        "method": "normalized(code)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "5JM4kNznvqH/mB5ZBskwHECEEV5q3uG4S/038u6vkiI=",
        "target": "function",
        "kind": "body",
        "method": "normalized(code)",
        "file_path": "Optimization/nn_dist/data/source_code/data_files/cpp/opencv_annotation.cpp",
        "byte_start": 3852,
        "byte_end": 4519,
        "line_start": 88,
        "line_end": 113,
        "col_start": 1,
        "col_end": 2,
        "language": "c99_tc3/static",
        "locator": "git+github.com/srianant/DNN_Hyperparameter_Optimization$9b047a6ba4dc636e9fd72b258c5a6952565e931b",
        "ingest_id": "c8a01f21-eb4c-455e-acdf-31f96c9056e9"
      },
      {
        "fingerprint": "5JM4kNznvqH/mB5ZBskwHECEEV5q3uG4S/038u6vkiI=",
        "target": "function",
        "kind": "body",
        "method": "normalized(code)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "5JM4kNznvqH/mB5ZBskwHECEEV5q3uG4S/038u6vkiI=",
        "target": "function",
        "kind": "body",
        "method": "normalized(code)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "5JM4kNznvqH/mB5ZBskwHECEEV5q3uG4S/038u6vkiI=",
        "target": "function",
        "kind": "body",
        "method": "normalized(code)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3786,
        "byte_end": 4453,
        "line_start": 83,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "void on_mouse(int event, int x, int y, int , void * )",
    "local_snippet": {
      "fingerprint": "sMCtNywksl0K7IGmvo4s75IPNHU3eWt6IThyfvxbemk=",
      "target": "function",
      "kind": "signature",
      "method": "raw",
      "file_path": "main.c",
      "byte_start": 810,
      "byte_end": 863,
      "line_start": 29,
      "line_end": 29,
      "col_start": 1,
      "col_end": 54,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "sMCtNywksl0K7IGmvo4s75IPNHU3eWt6IThyfvxbemk=",
        "target": "function",
        "kind": "signature",
        "method": "raw",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 3785,
        "line_start": 82,
        "line_end": 82,
        "col_start": 1,
        "col_end": 54,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "sMCtNywksl0K7IGmvo4s75IPNHU3eWt6IThyfvxbemk=",
        "target": "function",
        "kind": "signature",
        "method": "raw",
        "file_path": "Optimization/nn_dist/data/source_code/data_files/cpp/opencv_annotation.cpp",
        "byte_start": 3798,
        "byte_end": 3851,
        "line_start": 87,
        "line_end": 87,
        "col_start": 1,
        "col_end": 54,
        "language": "c99_tc3/static",
        "locator": "git+github.com/srianant/DNN_Hyperparameter_Optimization$9b047a6ba4dc636e9fd72b258c5a6952565e931b",
        "ingest_id": "c8a01f21-eb4c-455e-acdf-31f96c9056e9"
      },
      {
        "fingerprint": "sMCtNywksl0K7IGmvo4s75IPNHU3eWt6IThyfvxbemk=",
        "target": "function",
        "kind": "signature",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 3785,
        "line_start": 82,
        "line_end": 82,
        "col_start": 1,
        "col_end": 54,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "sMCtNywksl0K7IGmvo4s75IPNHU3eWt6IThyfvxbemk=",
        "target": "function",
        "kind": "signature",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 3785,
        "line_start": 82,
        "line_end": 82,
        "col_start": 1,
        "col_end": 54,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "sMCtNywksl0K7IGmvo4s75IPNHU3eWt6IThyfvxbemk=",
        "target": "function",
        "kind": "signature",
        "method": "raw",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 3785,
        "line_start": 82,
        "line_end": 82,
        "col_start": 1,
        "col_end": 54,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "{\n    // Use the cmdlineparser to process input arguments\n    CommandLineParser parser(argc, argv,\n        \"{ help h usage ? |      | show this message }\"\n        \"{ images i       |      | (required) path to image folder [example - /data/testimages/] }\"\n        \"{ annotations a  |      | (required) path to annotations txt file [example - /data/annotations.txt] }\"\n        \"{ maxWindowHeight m  |  -1   | (optional) images larger in height than this value will be scaled down }\"\n        \"{ resizeFactor r  |  2  | (optional) factor for scaling down [default = half the size] }\"\n    );\n    // Read in the input arguments\n    if (parser.has(\"help\")){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return 0;\n    }\n    string image_folder(parser.get<string>(\"images\"));\n    string annotations_file(parser.get<string>(\"annotations\"));\n    if (image_folder.empty() || annotations_file.empty()){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return -1;\n    }\n\n    int resizeFactor = parser.get<int>(\"resizeFactor\");\n    int const maxWindowHeight = parser.get<int>(\"maxWindowHeight\") > 0 ? parser.get<int>(\"maxWindowHeight\") : -1;\n\n    // Start by processing the data\n    // Return the image filenames inside the image folder\n    map< String, vector<Rect> > annotations;\n    vector<String> filenames;\n    String folder(image_folder);\n    glob(folder, filenames);\n\n    // Add key tips on how to use the software when running it\n    cout << \"* mark rectangles with the left mouse button,\" << endl;\n    cout << \"* press 'c' to accept a selection,\" << endl;\n    cout << \"* press 'd' to delete the latest selection,\" << endl;\n    cout << \"* press 'n' to proceed with next image,\" << endl;\n    cout << \"* press 'esc' to stop.\" << endl;\n\n    // Loop through each image stored in the images folder\n    // Create and temporarily store the annotations\n    // At the end write everything to the annotations file\n    for (size_t i = 0; i < filenames.size(); i++){\n        // Read in an image\n        Mat current_image = imread(filenames[i]);\n        bool const resize_bool = (maxWindowHeight > 0) && (current_image.rows > maxWindowHeight);\n\n        // Check if the image is actually read - avoid other files in the folder, because glob() takes them all\n        // If not then simply skip this iteration\n        if(current_image.empty()){\n            continue;\n        }\n\n        if(resize_bool){\n            resize(current_image, current_image, Size(current_image.cols/resizeFactor, current_image.rows/resizeFactor), 0, 0, INTER_LINEAR_EXACT);\n        }\n\n        // Perform annotations & store the result inside the vectorized structure\n        // If the image was resized before, then resize the found annotations back to original dimensions\n        vector<Rect> current_annotations = get_annotations(current_image);\n        if(resize_bool){\n            for(int j =0; j < (int)current_annotations.size(); j++){\n                current_annotations[j].x = current_annotations[j].x * resizeFactor;\n                current_annotations[j].y = current_annotations[j].y * resizeFactor;\n                current_annotations[j].width = current_annotations[j].width * resizeFactor;\n                current_annotations[j].height = current_annotations[j].height * resizeFactor;\n            }\n        }\n        annotations[filenames[i]] = current_annotations;\n\n        // Check if the ESC key was hit, then exit earlier then expected\n        if(stop){\n            break;\n        }\n    }\n\n    // When all data is processed, store the data gathered inside the proper file\n    // This now even gets called when the ESC button was hit to store preliminary results\n    ofstream output(annotations_file.c_str());\n    if ( !output.is_open() ){\n        cerr << \"The path for the output file contains an error and could not be opened. Please check again!\" << endl;\n        return 0;\n    }\n\n    // Store the annotations, write to the output file\n    for(map<String, vector<Rect> >::iterator it = annotations.begin(); it != annotations.end(); it++){\n        vector<Rect> &anno = it->second;\n        output << it->first << \" \" << anno.size();\n        for(size_t j=0; j < anno.size(); j++){\n            Rect temp = anno[j];\n            output << \" \" << temp.x << \" \" << temp.y << \" \" << temp.width << \" \" << temp.height;\n        }\n        output << endl;\n    }\n\n    return 0;\n}",
    "local_snippet": {
      "fingerprint": "mat4Lu5OG2fN0tMzhzw85LFbxNcA5auc+xd3SBWfMic=",
      "target": "function",
      "kind": "body",
      "method": "normalized(comment)",
      "file_path": "main.c",
      "byte_start": 5515,
      "byte_end": 10018,
      "line_start": 167,
      "line_end": 264,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "mat4Lu5OG2fN0tMzhzw85LFbxNcA5auc+xd3SBWfMic=",
        "target": "function",
        "kind": "body",
        "method": "normalized(comment)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "mat4Lu5OG2fN0tMzhzw85LFbxNcA5auc+xd3SBWfMic=",
        "target": "function",
        "kind": "body",
        "method": "normalized(comment)",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "mat4Lu5OG2fN0tMzhzw85LFbxNcA5auc+xd3SBWfMic=",
        "target": "function",
        "kind": "body",
        "method": "normalized(comment)",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "mat4Lu5OG2fN0tMzhzw85LFbxNcA5auc+xd3SBWfMic=",
        "target": "function",
        "kind": "body",
        "method": "normalized(comment)",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "{\n    // Use the cmdlineparser to process input arguments\n    CommandLineParser parser(argc, argv,\n        \"{ help h usage ? |      | show this message }\"\n        \"{ images i       |      | (required) path to image folder [example - /data/testimages/] }\"\n        \"{ annotations a  |      | (required) path to annotations txt file [example - /data/annotations.txt] }\"\n        \"{ maxWindowHeight m  |  -1   | (optional) images larger in height than this value will be scaled down }\"\n        \"{ resizeFactor r  |  2  | (optional) factor for scaling down [default = half the size] }\"\n    );\n    // Read in the input arguments\n    if (parser.has(\"help\")){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return 0;\n    }\n    string image_folder(parser.get<string>(\"images\"));\n    string annotations_file(parser.get<string>(\"annotations\"));\n    if (image_folder.empty() || annotations_file.empty()){\n        parser.printMessage();\n        cerr << \"TIP: Use absolute paths to avoid any problems with the software!\" << endl;\n        return -1;\n    }\n\n    int resizeFactor = parser.get<int>(\"resizeFactor\");\n    int const maxWindowHeight = parser.get<int>(\"maxWindowHeight\") > 0 ? parser.get<int>(\"maxWindowHeight\") : -1;\n\n    // Start by processing the data\n    // Return the image filenames inside the image folder\n    map< String, vector<Rect> > annotations;\n    vector<String> filenames;\n    String folder(image_folder);\n    glob(folder, filenames);\n\n    // Add key tips on how to use the software when running it\n    cout << \"* mark rectangles with the left mouse button,\" << endl;\n    cout << \"* press 'c' to accept a selection,\" << endl;\n    cout << \"* press 'd' to delete the latest selection,\" << endl;\n    cout << \"* press 'n' to proceed with next image,\" << endl;\n    cout << \"* press 'esc' to stop.\" << endl;\n\n    // Loop through each image stored in the images folder\n    // Create and temporarily store the annotations\n    // At the end write everything to the annotations file\n    for (size_t i = 0; i < filenames.size(); i++){\n        // Read in an image\n        Mat current_image = imread(filenames[i]);\n        bool const resize_bool = (maxWindowHeight > 0) && (current_image.rows > maxWindowHeight);\n\n        // Check if the image is actually read - avoid other files in the folder, because glob() takes them all\n        // If not then simply skip this iteration\n        if(current_image.empty()){\n            continue;\n        }\n\n        if(resize_bool){\n            resize(current_image, current_image, Size(current_image.cols/resizeFactor, current_image.rows/resizeFactor), 0, 0, INTER_LINEAR_EXACT);\n        }\n\n        // Perform annotations & store the result inside the vectorized structure\n        // If the image was resized before, then resize the found annotations back to original dimensions\n        vector<Rect> current_annotations = get_annotations(current_image);\n        if(resize_bool){\n            for(int j =0; j < (int)current_annotations.size(); j++){\n                current_annotations[j].x = current_annotations[j].x * resizeFactor;\n                current_annotations[j].y = current_annotations[j].y * resizeFactor;\n                current_annotations[j].width = current_annotations[j].width * resizeFactor;\n                current_annotations[j].height = current_annotations[j].height * resizeFactor;\n            }\n        }\n        annotations[filenames[i]] = current_annotations;\n\n        // Check if the ESC key was hit, then exit earlier then expected\n        if(stop){\n            break;\n        }\n    }\n\n    // When all data is processed, store the data gathered inside the proper file\n    // This now even gets called when the ESC button was hit to store preliminary results\n    ofstream output(annotations_file.c_str());\n    if ( !output.is_open() ){\n        cerr << \"The path for the output file contains an error and could not be opened. Please check again!\" << endl;\n        return 0;\n    }\n\n    // Store the annotations, write to the output file\n    for(map<String, vector<Rect> >::iterator it = annotations.begin(); it != annotations.end(); it++){\n        vector<Rect> &anno = it->second;\n        output << it->first << \" \" << anno.size();\n        for(size_t j=0; j < anno.size(); j++){\n            Rect temp = anno[j];\n            output << \" \" << temp.x << \" \" << temp.y << \" \" << temp.width << \" \" << temp.height;\n        }\n        output << endl;\n    }\n\n    return 0;\n}",
    "local_snippet": {
      "fingerprint": "5QgYcXl4RyfWqfb6EcD6VEh+798k0DP6qMk5rGv3Sgw=",
      "target": "function",
      "kind": "body",
      "method": "raw",
      "file_path": "main.c",
      "byte_start": 5515,
      "byte_end": 10018,
      "line_start": 167,
      "line_end": 264,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "5QgYcXl4RyfWqfb6EcD6VEh+798k0DP6qMk5rGv3Sgw=",
        "target": "function",
        "kind": "body",
        "method": "raw",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "5QgYcXl4RyfWqfb6EcD6VEh+798k0DP6qMk5rGv3Sgw=",
        "target": "function",
        "kind": "body",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "5QgYcXl4RyfWqfb6EcD6VEh+798k0DP6qMk5rGv3Sgw=",
        "target": "function",
        "kind": "body",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      },
      {
        "fingerprint": "5QgYcXl4RyfWqfb6EcD6VEh+798k0DP6qMk5rGv3Sgw=",
        "target": "function",
        "kind": "body",
        "method": "raw",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 8437,
        "byte_end": 12940,
        "line_start": 220,
        "line_end": 317,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      }
    ]
  },
  {
    "found_in": "main.c",
    "local_text": "void on_mouse(int event, int x, int y, int , void * )\n{\n    // Action when left button is clicked\n    if(event == EVENT_LBUTTONDOWN)\n    {\n        if(!start_draw)\n        {\n            roi_x0 = x;\n            roi_y0 = y;\n            start_draw = true;\n        } else {\n            roi_x1 = x;\n            roi_y1 = y;\n            start_draw = false;\n        }\n    }\n\n    // Action when mouse is moving and drawing is enabled\n    if((event == EVENT_MOUSEMOVE) && start_draw)\n    {\n        // Redraw bounding box for annotation\n        Mat current_view;\n        image.copyTo(current_view);\n        rectangle(current_view, Point(roi_x0,roi_y0), Point(x,y), Scalar(0,0,255));\n        imshow(window_name, current_view);\n    }\n}",
    "local_snippet": {
      "fingerprint": "ERDq3cQ7WG5tL8pcVUiveCtrgbEPjKwJOlfHSJy5e8c=",
      "target": "function",
      "kind": "full",
      "method": "raw",
      "file_path": "main.c",
      "byte_start": 810,
      "byte_end": 1531,
      "line_start": 29,
      "line_end": 55,
      "col_start": 1,
      "col_end": 2,
      "language": "c99_tc3/static"
    },
    "matching_snippets": [
      {
        "fingerprint": "ERDq3cQ7WG5tL8pcVUiveCtrgbEPjKwJOlfHSJy5e8c=",
        "target": "function",
        "kind": "full",
        "method": "raw",
        "file_path": "src/libs/opencv/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/alanross/AlvaAR$7796af500ee92001ac2a9888363ff64d7a3bee75",
        "ingest_id": "df994a62-ad4f-4ce0-99c9-bd8039ead7f2"
      },
      {
        "fingerprint": "ERDq3cQ7WG5tL8pcVUiveCtrgbEPjKwJOlfHSJy5e8c=",
        "target": "function",
        "kind": "full",
        "method": "raw",
        "file_path": "Optimization/nn_dist/data/source_code/data_files/cpp/opencv_annotation.cpp",
        "byte_start": 3798,
        "byte_end": 4519,
        "line_start": 87,
        "line_end": 113,
        "col_start": 1,
        "col_end": 2,
        "language": "c99_tc3/static",
        "locator": "git+github.com/srianant/DNN_Hyperparameter_Optimization$9b047a6ba4dc636e9fd72b258c5a6952565e931b",
        "ingest_id": "c8a01f21-eb4c-455e-acdf-31f96c9056e9"
      },
      {
        "fingerprint": "ERDq3cQ7WG5tL8pcVUiveCtrgbEPjKwJOlfHSJy5e8c=",
        "target": "function",
        "kind": "full",
        "method": "raw",
        "file_path": "third/opencv-4.6.0/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/kallaballa/Poppy$f0e41fd1fcb2db185d90dd280ebf73b58e2e66ef",
        "ingest_id": "7edd2e2b-0d25-4e10-a82b-af13b6850ccc"
      },
      {
        "fingerprint": "ERDq3cQ7WG5tL8pcVUiveCtrgbEPjKwJOlfHSJy5e8c=",
        "target": "function",
        "kind": "full",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.7",
        "ingest_id": "889bedab-a1d2-450f-8fc4-8bbb4d69854b"
      },
      {
        "fingerprint": "ERDq3cQ7WG5tL8pcVUiveCtrgbEPjKwJOlfHSJy5e8c=",
        "target": "function",
        "kind": "full",
        "method": "raw",
        "file_path": "3rdparty/opencv-4.5.4/apps/annotation/opencv_annotation.cpp",
        "byte_start": 3732,
        "byte_end": 4453,
        "line_start": 82,
        "line_end": 108,
        "col_start": 1,
        "col_end": 2,
        "language": "cpp_98/static",
        "locator": "git+github.com/linuxdeepin/deepin-ocr$1.0.6",
        "ingest_id": "0552000f-5cea-4243-88c2-46833ffd197c"
      }
    ]
  }
]